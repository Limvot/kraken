
(def! get-value-helper (fn* (dict key idx) (if (>= idx (count dict)) nil (if (= key (nth dict idx)) (nth dict (+ idx 1)) (get-value-helper dict key (+ idx 2))))))
(def! get-value (fn* (dict key) (get-value-helper dict key 0)))
(def! method-call (fn* (object method & arguments) (let* (method_fn (get-value (meta object) method))
                                                            (if (= method_fn nil)
                                                                (println "no method " method)
                                                                (apply method_fn object arguments)))))
; method call syntax
(add_grammar_rule 'form [ 'form "\\." 'atom 'optional_WS  "\\(" 'optional_WS 'space_forms 'optional_WS "\\)" ] (fn* (o _ m _ _ _ p _ _) `(method-call ~o '~m ,p)))
; object syntax
(def! flatten (fn* (l) (let*
                        (flatten-helper (fn* (l a f) (if (> (count l) 0)
                                                     (f (rest l) (concat a (first l)) f)
                                                     a)))
                        (flatten-helper l [] flatten-helper))))
(add_grammar_rule 'form [ "obj" 'optional_WS 'atom 'optional_WS "{" 'optional_WS 'form 'optional_WS [ 'atom 'optional_WS 'form 'optional_WS ] + "}" ] (fn* (_ _ name _ _ _ constructor _ methods _)
                                     (let* (processed_methods (flatten (map (fn* (m) [`'~(nth m 0) (nth m 2)]) methods)))
                                        `(def! ~name (fn* (& args) (with-meta (apply ~constructor args)  [ ,processed_methods ] ))))))
obj my_constructor {
    (fn* () [17])
    inc (fn* (o) (set-nth! o 0 (+ (nth o 0) 1)))
    dec (fn* (o) (set-nth! o 0 (- (nth o 0) 1)))
    set (fn* (o n) (set-nth! o 0 n))
    get (fn* (o) (nth o 0))
}

(println "pre construct")
(def! actual_obj (my_constructor))
(println "constructed" actual_obj)

(println "here" actual_obj)
(println "here" (meta actual_obj))

(def! main (fn* () (do
                   (println "actual_obj" actual_obj)
                   (method-call actual_obj 'inc)
                   (println "actual_obj" actual_obj)
                   (println "with get: " (method-call actual_obj 'get))
                   (println "actual_obj" actual_obj)
                   (method-call actual_obj 'dec)
                   (method-call actual_obj 'dec)
                   (println "actual_obj" actual_obj)
                   (println "setting old style 654")
                   (method-call actual_obj 'set 654)
                   (println "actual_obj" actual_obj)
                   (println "Ok, doing with new method call syntax")
                   actual_obj.inc()
                   (println "actual_obj" actual_obj)
                   (println "setting new style 1337")
                   actual_obj.set(1337)
                   (println "actual_obj" actual_obj)
                   (println "with get " actual_obj.get())
                    0)))
(do
    (println "interp-main")
    (main)
    (println "done interp-main")
    nil)
