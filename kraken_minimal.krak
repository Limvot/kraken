import io:*
import grammer:*
import parser:*
import ast_transformation:*
import string:*
import util:*
import symbol:*
import tree:*
import serialize:*
import c_generator:*
import os:*

fun main(argc: int, argv: **char):int {
    var gram: grammer
    var base_dir = string("/").join(string(argv[0]).split('/').slice(0,-2))
    var file_name = base_dir + "/krakenGrammer.kgm"
    var file_contents = read_file(file_name)
    gram.copy_construct(&load_grammer(file_contents))
    gram.calculate_first_set()
    gram.calculate_state_automaton()
    var kraken_file_name = string(argv[1])
    var parse.construct(gram): parser
    var ast_pass.construct(): ast_transformation
    var importer.construct(parse, ast_pass, vector(string(), base_dir + "/stdlib/")): importer
    importer.import(kraken_file_name)
    var c_generator.construct(): c_generator
    var c_output_pair = c_generator.generate_c(importer.name_ast_map)
    var kraken_c_output_name = kraken_file_name + ".c"
    write_file(kraken_c_output_name, c_output_pair.first)
    var executable_name = string(".").join(kraken_file_name.split('.').slice(0,-2))
    if (argc == 3)
        executable_name = string(argv[2])
    var compile_string = "cc -g -O3 -std=c99 " + c_output_pair.second + " " + kraken_c_output_name + " -o " + executable_name
    system(compile_string)
    return 0
}

