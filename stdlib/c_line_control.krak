import symbol:*
import tree:*
import vec:*
import map:*
import util:*
import str:*
import mem:*
import io:*
import ast_nodes:*
import ast_transformation:*

import pass_common:*

fun get_line(node: *tree<symbol>, name: str): *ast_node {
    var to_ret = _passthrough()
    to_ret->simple_passthrough.passthrough_str = str("\n#line ") + get_first_terminal(node)->data.position + " \"" + name + "\"\n"
    return to_ret
}

fun c_line_control(name_ast_map: *map<str, pair<*tree<symbol>,*ast_node>>, ast_to_syntax: *map<*ast_node, *tree<symbol>>) {
    var first = true
    name_ast_map->for_each(fun(name: str, syntax_ast_pair: pair<*tree<symbol>,*ast_node>) {
        /*var helper = fun(node: *ast_node, parent_chain: *stack<*ast_node>) {*/
            /*match(*node) {*/
                    /*if (is_code_block(parent_chain->top()) && ast_to_syntax->contains_key(node)) {*/
                        /*println(str("adding ") + get_ast_name(node) + " to " + get_ast_name(parent))*/
                        /*add_before_in(get_line(ast_to_syntax->get(node), name), node, parent_chain->top())*/
                    /*}*/
            /*}*/
        /*}*/
        /*if (first)*/
            /*run_on_tree(helper, empty_pass_second_half(), syntax_ast_pair.second)*/
        first = false
    })
}


