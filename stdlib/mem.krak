__if_comp__ __C__ __simple_passthrough__ """
	#include <stdlib.h>
"""

char* nullPtr = 0;

char* malloc(int size) {
	char* memPtr = nullPtr;
	__if_comp__ __C__ {
		__simple_passthrough__ """
			memPtr = malloc(size);
		"""
	}
	return memPtr;
}

void free(char* memPtr) {
	__if_comp__ __C__ {
		__simple_passthrough__ """
			free(memPtr);
		"""
	}
}

template <T> void free(T* memPtr) {
	__if_comp__ __C__ {
		__simple_passthrough__ """
			free(memPtr);
		"""
	}
}

template <T> int sizeof() {
	int result = 0;
	T testObj;
	__if_comp__ __C__ {
		__simple_passthrough__ """
			result = sizeof(testObj);
		"""
	}
	return result;
}


template <T> T* new(int count) {
	return malloc( sizeof<T>() * count );
}

template <T> T* new() {
	return new<T>(1);
}

template <T> void delete(T* toDelete, int itemDestructCount) {
    for (int i = 0; i < itemDestructCount; i++;)
        toDelete[i].destruct();
    delete<T>(toDelete);
}

template <T> void delete(T* toDelete) {
	free<T>(toDelete);
}
