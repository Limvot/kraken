import vector
import serialize
import util


fun stack<T>():stack<T> {
    var out.construct():stack<T>
    return out
}
fun stack<T>(in:T):stack<T> {
    var out.construct():stack<T>
    out.push(in)
    return out
}

obj stack<T> (Object, Serializable) {
    var data: vector::vector<T>
    fun construct(): *stack<T> {
        data.construct()
        return this
    }
    fun copy_construct(other: *stack<T>) {
        data.copy_construct(&other->data)
    }
    fun destruct() {
        data.destruct()
    }
    fun operator=(other: ref stack<T>) {
        data = other.data
    }
    fun serialize(): vector::vector<char> {
        return serialize::serialize(data)
    }
    fun unserialize(it: ref vector::vector<char>, pos: int): int {
        var temp = vector::vector<T>()
        util::unpack(temp, pos) = serialize::unserialize<vector::vector<T>>(it, pos)
        data.copy_construct(&temp)
        return pos
    }
    fun push(it: ref T) {
        data.addEnd(it)
    }
    fun pop(): T {
        var toRet = data[data.size-1]
        data.remove(data.size-1)
        return toRet
    }
    fun clear() {
        data.clear()
    }
    fun top(): T {
        return data[data.size-1]
    }
    fun size(): int {
        return data.size
    }
    fun empty():bool {
        return data.size == 0
    }
}
