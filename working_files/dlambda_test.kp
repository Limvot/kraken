
(let (
    dl1 (lambda ([a b]) (+ a b))
    _ (println "dl1 " (dl1 [5 6]))
    dl2 (lambda (a [b c]) (+ a b c))
    _ (println "dl2 " (dl2 1 [5 6]))
    dl3 (lambda ([a b] c) (+ a b c))
    _ (println "dl3 " (dl3 [5 6] 2))
    dl4 (lambda (a [b c] d) (+ a b c d))
    _ (println "dl4 " (dl4 5 [5 6] 4))
    dl5 (lambda (a) (+ a 1))
    _ (println "dl5 " (dl5 1336))
    dl6 (lambda (a b) (+ a b))
    _ (println "dl6 " (dl6 1336 12))
    dl7 (lambda () (+ 1 1))
    _ (println "dl7 " (dl7))
    fib (rec-lambda recurse (n [a b]) (if (= 0 n) a
                                                   (recurse (- n 1) [b (+ a b)])))
    _ (println "fib 5 " (fib 5 [1 1]))
) nil)
